import cv2


class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__resize_image_width = 640
        self.__resize_image_height = 480
        self.__resize_image_interpolation = cv2.INTER_CUBIC

        self.resize_image_output = None

        self.__hsv_threshold_input = self.resize_image_output
        self.__hsv_threshold_hue = [50.0, 70.0]
        self.__hsv_threshold_saturation = [160.0, 215.0]
        self.__hsv_threshold_value = [170.0, 225.0]

        self.hsv_threshold_output = None

        self.__find_contours_input = self.hsv_threshold_output
        self.__find_contours_external_only = True

        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 900.0
        self.__filter_contours_min_perimeter = 120.0
        self.__filter_contours_min_width = 30.0
        self.__filter_contours_max_width = 1000
        self.__filter_contours_min_height = 30.0
        self.__filter_contours_max_height = 1000
        self.__filter_contours_solidity = [90.0, 100]
        self.__filter_contours_max_vertices = 1000000
        self.__filter_contours_min_vertices = 0
        self.__filter_contours_min_ratio = 0
        self.__filter_contours_max_ratio = 1000

        self.filter_contours_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Resize_Image0:
        self.__resize_image_input = source0
        (self.resize_image_output) = self.__resize_image(
                self.__resize_image_input,
                self.__resize_image_width,
                self.__resize_image_height,
                self.__resize_image_interpolation
                )

        # Step HSV_Threshold0:
        self.__hsv_threshold_input = self.resize_image_output
        (self.hsv_threshold_output) = self.__hsv_threshold(
                self.__hsv_threshold_input,
                self.__hsv_threshold_hue,
                self.__hsv_threshold_saturation,
                self.__hsv_threshold_value
                )

        # Step Find_Contours0:
        self.__find_contours_input = self.hsv_threshold_output
        (self.find_contours_output) = self.__find_contours(
                self.__find_contours_input,
                self.__find_contours_external_only
                )

        # Step Filter_Contours0:
        self.__filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(
                self.__filter_contours_contours,
                self.__filter_contours_min_area,
                self.__filter_contours_min_perimeter,
                self.__filter_contours_min_width,
                self.__filter_contours_max_width,
                self.__filter_contours_min_height,
                self.__filter_contours_max_height,
                self.__filter_contours_solidity,
                self.__filter_contours_max_vertices,
                self.__filter_contours_min_vertices,
                self.__filter_contours_min_ratio,
                self.__filter_contours_max_ratio
                )

    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        # What are these zeroes for?
        # Are they necessary?
        # Consider adding more descriptive variable name
        return cv2.resize(
                input, ((int)(width), (int)(height)),
                0, 0, interpolation
                )

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        # What exactly is `out`?
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        min_hue, max_hue = hue
        min_sat, max_sat = sat
        min_val, max_val = val
        return cv2.inRange(
                out, (min_hue, min_sat, min_val),
                (max_hue, max_sat, max_val)
                )

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image
        to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours

    # I still think this function needs editing,
    # but it is probably an API/module call so not much we can do here.
    @staticmethod
    def __filter_contours(
            input_contours, min_area, min_perimeter,
            min_width, max_width, min_height, max_height,
            solidity, max_vertex_count, min_vertex_count,
            min_ratio, max_ratio
            ):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour
            that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x, y, w, h = cv2.boundingRect(contour)
            if not (min_height <= (w or h) <= max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            # Why do they have min and max paramaters for each thing
            # But then leave solidity as a list?
            min_solidity, max_solidity = solidity
            solid = 100 * area / cv2.contourArea(hull)
            if not (min_solidity <= solid <= max_solidity):
                continue
            vertex_count = len(contour)
            if not (min_vertex_count <= vertex_count <= max_vertex_count):
                continue
            ratio = (float)(w) / h
            if not (min_ratio <= ratio <= max_ratio):
                continue
            output.append(contour)
        return output
